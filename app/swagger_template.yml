info:
  title: API for SMARTS FILTER
  description: |
    Endpoints for SMARTSâ€‘based filtering.
  version: 1
components:
  schemas:
    painsentry:
      type: object

  parameters:
    SMILESList:
      name: SMILES
      in: query
      type: array
      items:
        type: string
      required: true
      description: List of compound SMILES

    SmileName:
      name: Smile_Names
      in: query
      type: array
      items:
        type: string
      required: false
      description: List of compound names

    SmartName:
      name: Smart_Names
      in: query
      type: array
      items:
        type: string
      collectionFormat: multi
      required: false
      description: List of compound names

    exclude_mol_props:
      name: ExcludeMolProp
      in: query
      type: boolean
      required: false
      description: Exclude Molecular Properties

    Smarts:
      name: smarts
      in: query
      type: array
      items:
        type: string
      collectionFormat: multi
      required: true
      style: form
      explode: true
      description: Takes one or more SMARTS strings (comma-separated or repeated).

    IsoMericSmiles:
      name: isomericSmiles
      in: query
      type: boolean
      required: false
      description: Return isomeric SMILES

    KekuleSmiles:
      name: kekuleSmiles
      in: query
      type: boolean
      required: false
      description: Return kekule SMILES

    usa:
      name: unique_set
      in: query
      type: boolean
      required: false
      description: Unique Set-of-Atoms Match Counts

    nonzero_rows:
      name: only_rows
      in: query
      type: boolean
      required: false
      description: Only include rows (i.e., molecules) with at least one match in output

    strict:
      name: strict_error
      in: query
      type: boolean
      required: false
      description: Raise error if any SMARTS cannot be parsed. If not set, will ignore invalid SMARTS.

  responses:
    ResponseCode400:
      description: Malformed request error

paths:
  /smarts_filter/get_filterpains:
    get:
      tags:
        - SMARTS FILTER
      summary: Get the SMILES strings with their PAINS test result.
      description: Checks if the input SMILES have passed or failed the PAINS Test.
      parameters:
        - $ref: '#/components/parameters/SMILESList'
        - $ref: '#/components/parameters/SmileName'
        - $ref: '#/components/parameters/exclude_mol_props'
      responses:
        200:
          description: A JSON object containing all compounds and their associated tests either passed or failed.
          examples:
            application/json: |
              {
                "all_pains_filters": [
                  "ene_six_het_A(483)",
                  "hzone_phenol_A(479)",
                  "anil_di_alk_A(478)",
                  "..."
                ],
                "invalid": [],
                "results": [
                  {
                    "failed": false,
                    "highlight_atoms": [],
                    "name": "NSC-2066",
                    "reasons": [],
                    "smiles": "c1(=O)c2c(n(c(=O)n1C)C)nc[nH]2"
                  },
                  {
                    "failed": true,
                    "highlight_atoms": [
                      [
                        5,
                        3,
                        2,
                        1,
                        16,
                        14,
                        15,
                        4,
                        6
                      ]
                    ],
                    "name": "0326-0519",
                    "reasons": [
                      "ene_six_het_A(483)"
                    ],
                    "smiles": "O=C1NC(=O)C(=Cc2ccc(Cl)cc2)C(=O)N1"
                  },
                  {
                    "failed": true,
                    "highlight_atoms": [
                      [
                        8,
                        6,
                        5,
                        3,
                        2,
                        1,
                        0,
                        7,
                        9
                      ]
                    ],
                    "name": "0327-0360",
                    "reasons": [
                      "ene_six_het_A(483)"
                    ],
                    "smiles": "O=C1NC(=S)NC(=O)C1=Cc1ccc(Cl)cc1"
                  }
                ]
              }
        400:
          $ref: '#/components/responses/ResponseCode400'

  /smarts_filter/get_matchcounts:
    get:
      tags:
        - SMARTS FILTER
      summary: Get match counts of SMARTS patterns per SMILES.
      description: Checks SMARTS pattern match counts for each input SMILES.
      parameters:
        - $ref: '#/components/parameters/SMILESList'
        - $ref: '#/components/parameters/SmileName'
        - $ref: '#/components/parameters/Smarts'
        - $ref: '#/components/parameters/SmartName'
        - $ref: '#/components/parameters/usa'
        - $ref: '#/components/parameters/exclude_mol_props'
        - $ref: '#/components/parameters/nonzero_rows'

      responses:
        200:
          description: Match counts for each SMILES.
          examples:
            application/json: |
             {[
                {
                  "n_matches": 2,
                  "name": "0365-0123",
                  "smiles": "O=C1NC(=O)C(=Cc2ccc(C=C3C(=O)NC(=O)NC3=O)cc2)C(=O)N1"
                },
                {
                  "n_matches": 0,
                  "name": "NSC-4624",
                  "smiles": "O=C(O)c1nc(N=Nc2ccc(S(=O)(=O)O)cc2)[nH]c1C(=O)O"
                },
                {
                  "n_matches": 1,
                  "name": "0606-5831",
                  "smiles": "CCCCCCCCOc1ccc(C=C2C(=O)NC(=O)NC2=O)cc1"
                }
              ]}
        400:
          $ref: '#/components/responses/ResponseCode400'

  /smarts_filter/get_matchfilter:
    get:
      tags:
        - SMARTS FILTER
      summary: Get matched SMILES strings with optional names.
      description: Returns matched SMILES (and names if provided) that pass SMARTS filtering.
      parameters:
        - $ref: '#/components/parameters/SMILESList'
        - $ref: '#/components/parameters/SmileName'
        - $ref: '#/components/parameters/Smarts'
        - $ref: '#/components/parameters/SmartName'
        - $ref: '#/components/parameters/exclude_mol_props'
      responses:
        200:
          description: List of each SMILES and names matching the multi SMARTS.
          examples:
            application/json: |
              {
                  "failed": [
                    {
                      "failed": true,
                      "highlight_atoms": [
                        [
                          0,
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          23,
                          24,
                          25
                        ],
                        [
                          17,
                          16,
                          15,
                          13,
                          14,
                          12,
                          11,
                          19,
                          20,
                          18
                        ]
                      ],
                      "name": "0365-0123",
                      "reason": "ene_six_het_A",
                      "smiles": "O=C1NC(=O)C(=Cc2ccc(C=C3C(=O)NC(=O)NC3=O)cc2)C(=O)N1"
                    },
                    {
                      "failed": true,
                      "highlight_atoms": [
                        [
                          19,
                          18,
                          17,
                          15,
                          16,
                          14,
                          13,
                          21,
                          22,
                          20
                        ]
                      ],
                      "name": "0606-5831",
                      "reason": "ene_six_het_A",
                      "smiles": "CCCCCCCCOc1ccc(C=C2C(=O)NC(=O)NC2=O)cc1"
                    }
                  ],
                  "passed": [
                    {
                      "failed": false,
                      "name": "NSC-4624",
                      "smiles": "[nH]1c(nc(c1C(=O)O)C(=O)O)N=Nc2ccc(cc2)S(=O)(=O)O"
                    }
                  ]
                }
        400:
          $ref: '#/components/responses/ResponseCode400'

  /smarts_filter/get_multi_matchcounts:
    get:
      tags:
        - SMARTS FILTER
      summary: Get SMARTS pattern match counts per SMILES.
      description: For each SMILES, compute how many SMARTS patterns match (multi-match counting).
      parameters:
        - $ref: '#/components/parameters/SMILESList'
        - $ref: '#/components/parameters/SmileName'
        - $ref: '#/components/parameters/Smarts'
        - $ref: '#/components/parameters/IsoMericSmiles'
        - $ref: '#/components/parameters/KekuleSmiles'
        - $ref: '#/components/parameters/SmartName'
        - $ref: '#/components/parameters/usa'
        - $ref: '#/components/parameters/strict'
        - $ref: '#/components/parameters/nonzero_rows'
        - $ref: '#/components/parameters/exclude_mol_props'
      responses:
        200:
          description: Match counts per compound.
          examples:
            application/json: |
              [
                {
                  "matches": [
                    {
                      "count": 2,
                      "highlight_atoms": [
                        [
                          0,
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          23,
                          24,
                          25
                        ],
                        [
                          17,
                          16,
                          15,
                          13,
                          14,
                          12,
                          11,
                          19,
                          20,
                          18
                        ]
                      ],
                      "name": "ene_six_het_A",
                      "smarts": "[O,S]=C1[NH1]C(=O)C(=C)C(=O)[NH1]1"
                    },
                    {
                      "count": 0,
                      "highlight_atoms": [],
                      "name": "hzone_phenol_A",
                      "smarts": "[ND1H2]-[ND2]=Cc1c(-[OH1])cccc1"
                    },
                    {
                      "count": 0,
                      "highlight_atoms": [],
                      "name": "ene_five_het_D",
                      "smarts": "[C!R]=C1C(=O)NNC1=O"
                    },
                    {
                      "count": 0,
                      "highlight_atoms": [],
                      "name": "anil_alk_ene",
                      "smarts": "C1C=CC2C1CNc1ccccc21"
                    }
                  ],
                  "name": "0365-0123",
                  "smiles": "O=C1NC(=O)C(=Cc2ccc(C=C3C(=O)NC(=O)NC3=O)cc2)C(=O)N1"
                },
                {
                  "matches": [
                    {
                      "count": 0,
                      "highlight_atoms": [],
                      "name": "ene_six_het_A",
                      "smarts": "[O,S]=C1[NH1]C(=O)C(=C)C(=O)[NH1]1"
                    },
                    {
                      "count": 0,
                      "highlight_atoms": [],
                      "name": "hzone_phenol_A",
                      "smarts": "[ND1H2]-[ND2]=Cc1c(-[OH1])cccc1"
                    },
                    {
                      "count": 0,
                      "highlight_atoms": [],
                      "name": "ene_five_het_D",
                      "smarts": "[C!R]=C1C(=O)NNC1=O"
                    },
                    {
                      "count": 0,
                      "highlight_atoms": [],
                      "name": "anil_alk_ene",
                      "smarts": "C1C=CC2C1CNc1ccccc21"
                    }
                  ],
                  "name": "NSC-4624",
                  "smiles": "O=C(O)c1nc(N=Nc2ccc(S(=O)(=O)O)cc2)[nH]c1C(=O)O"
                },
                {
                  "matches": [
                    {
                      "count": 1,
                      "highlight_atoms": [
                        [
                          19,
                          18,
                          17,
                          15,
                          16,
                          14,
                          13,
                          21,
                          22,
                          20
                        ]
                      ],
                      "name": "ene_six_het_A",
                      "smarts": "[O,S]=C1[NH1]C(=O)C(=C)C(=O)[NH1]1"
                    },
                    {
                      "count": 0,
                      "highlight_atoms": [],
                      "name": "hzone_phenol_A",
                      "smarts": "[ND1H2]-[ND2]=Cc1c(-[OH1])cccc1"
                    },
                    {
                      "count": 0,
                      "highlight_atoms": [],
                      "name": "ene_five_het_D",
                      "smarts": "[C!R]=C1C(=O)NNC1=O"
                    },
                    {
                      "count": 0,
                      "highlight_atoms": [],
                      "name": "anil_alk_ene",
                      "smarts": "C1C=CC2C1CNc1ccccc21"
                    }
                  ],
                  "name": "0606-5831",
                  "smiles": "CCCCCCCCOc1ccc(C=C2C(=O)NC(=O)NC2=O)cc1"
                }
              ]
        400:
          $ref: '#/components/responses/ResponseCode400'

  /smarts_filter/get_multi_matchfilter:
    get:
      tags:
        - SMARTS FILTER
      summary: Get matched SMILES (multiple SMARTS).
      description: Returns SMILES strings that match any of the given SMARTS patterns, with names if provided.
      parameters:
        - $ref: '#/components/parameters/SMILESList'
        - $ref: '#/components/parameters/SmileName'
        - $ref: '#/components/parameters/Smarts'
        - $ref: '#/components/parameters/SmartName'
        - $ref: '#/components/parameters/strict'
        - $ref: '#/components/parameters/exclude_mol_props'
      responses:
        200:
          description: Matched SMILES with optional names.
          examples:
            application/json: |
              {
                "failed": [
                  {
                    "failed": true,
                    "highlight_atoms": [
                      [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        23,
                        24,
                        25
                      ],
                      [
                        17,
                        16,
                        15,
                        13,
                        14,
                        12,
                        11,
                        19,
                        20,
                        18
                      ]
                    ],
                    "name": "0365-0123",
                    "reason": "ene_six_het_A",
                    "smiles": "O=C1NC(=O)C(=Cc2ccc(C=C3C(=O)NC(=O)NC3=O)cc2)C(=O)N1"
                  },
                  {
                    "failed": true,
                    "highlight_atoms": [
                      [
                        19,
                        18,
                        17,
                        15,
                        16,
                        14,
                        13,
                        21,
                        22,
                        20
                      ]
                    ],
                    "name": "0606-5831",
                    "reason": "ene_six_het_A",
                    "smiles": "CCCCCCCCOc1ccc(C=C2C(=O)NC(=O)NC2=O)cc1"
                  }
                ],
                "passed": [
                  {
                    "failed": false,
                    "name": "NSC-4624",
                    "smiles": "[nH]1c(nc(c1C(=O)O)C(=O)O)N=Nc2ccc(cc2)S(=O)(=O)O"
                  }
                ]
              }
        400:
          $ref: '#/components/responses/ResponseCode400'

